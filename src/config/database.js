const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    // URL de conex√£o do MongoDB
    const mongoURI = process.env.MONGODB_URI;
    
    if (!mongoURI) {
      throw new Error('MONGODB_URI n√£o est√° definida nas vari√°veis de ambiente');
    }

    console.log('üîÑ Tentando conectar ao MongoDB...');
    console.log('üìç URI (mascarada):', mongoURI.replace(/:([^:@]+)@/, ':***@'));
    
    // Op√ß√µes de conex√£o
    const options = {
      maxPoolSize: 10, // M√°ximo de 10 conex√µes simult√¢neas
      serverSelectionTimeoutMS: 10000, // Timeout ap√≥s 10s (aumentado)
      socketTimeoutMS: 45000, // Timeout de socket ap√≥s 45s
      bufferCommands: false, // Disable mongoose buffering
      authSource: 'admin' // Adicionar authSource explicitamente
    };

    // Conectar ao MongoDB
    const conn = await mongoose.connect(mongoURI, options);

    console.log(`‚úÖ MongoDB conectado: ${conn.connection.host}`);
    
    // Event listeners para monitorar a conex√£o
    mongoose.connection.on('connected', () => {
      console.log('üîó Mongoose conectado ao MongoDB');
    });

    mongoose.connection.on('error', (err) => {
      console.error('‚ùå Erro na conex√£o do MongoDB:', err);
    });

    mongoose.connection.on('disconnected', () => {
      console.log('üîå Mongoose desconectado do MongoDB');
    });

    // Graceful shutdown
    process.on('SIGINT', async () => {
      await mongoose.connection.close();
      console.log('üõë Conex√£o do MongoDB fechada devido ao encerramento da aplica√ß√£o');
      process.exit(0);
    });

  } catch (error) {
    console.error('‚ùå Erro ao conectar com o MongoDB:', error.message);
    process.exit(1);
  }
};

module.exports = connectDB;
